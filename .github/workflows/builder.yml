name: builder
on:
  push:
  workflow_dispatch:

jobs:
  generator:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.generate-matrix.outputs.matrix }}
      buildx: ${{ steps.generate-buildx.outputs.buildx }}
      tags: ${{ steps.generate-tags.outputs.tags }}
      test-images: ${{ steps.generate-test-images.outputs.test-images }}
    steps:
    - uses: actions/checkout@v3
    - name: Fetch Dependencies
      run: sudo apt install -qq -y jq
    - name: Export Build Matrix
      id: generate-matrix
      run: echo "matrix=$(jq -r '.matrix' manifest.json)" >> ${GITHUB_OUTPUT}
    - name: Export docker build/buildx tags
      id: generate-buildx
      run: echo "buildx=$(jq -r '.buildx' manifest.json)" >> ${GITHUB_OUTPUT}
    - name: Export tag list
      id: generate-tags
      run: echo "tags=$(jq -r '.tags' manifest.json)" >> ${GITHUB_OUTPUT}
    - name: Export testing image names/tags
      id: generate-test-images
      run: echo "test-images=$(jq -r '."test-images"' manifest.json)" >> ${GITHUB_OUTPUT}
  
  image-builder:
    needs: generator
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJSON(needs.generator.outputs.matrix) }}
      fail-fast: false
    steps:
    - name: Set up QEMU
      if: github.ref == 'refs/heads/master'
      uses: docker/setup-qemu-action@v2
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Login to Docker Hub
      if: github.ref == 'refs/heads/master'
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_TOKEN }}
        password: ${{ secrets.DOCKER_HUB_SECRET }}
    - uses: actions/checkout@v3
    - name: Fetch Dependencies
      run: sudo apt install -qq -y jq moreutils
    - name: Build local testing Image
      run: |
        IMAGE="$(echo '${{needs.generator.outputs.test-images}}' | jq -r '."${{matrix.image}}"."${{matrix.nodegit}}"')" && 
        docker buildx build --load --build-arg ALPINE_TAG=${{matrix.image}} --build-arg NODEGIT_VERSION=${{matrix.nodegit}} --tag ${IMAGE} .
    - name: Check Nodegit Version
      run: |
        IMAGE="$(echo '${{needs.generator.outputs.test-images}}' | jq -r '."${{matrix.image}}"."${{matrix.nodegit}}"')" && 
        NODEGIT="$(docker run --rm $IMAGE /usr/local/bin/npm -g ls nodegit --json | jq -r '.dependencies.nodegit.version')" && echo "nodegit versions: ${NODEGIT}"
        [ "$NODEGIT" == "${{matrix.nodegit}}" ] && 
        echo "nodegit versions @${{matrix.nodegit}} [ OK ]"
    - name: Test Nodegit
      run: |
        IMAGE="$(echo '${{needs.generator.outputs.test-images}}' | jq -r '."${{matrix.image}}"."${{matrix.nodegit}}"')" && 
        docker run --rm -v "$(pwd)/test":/test $IMAGE /bin/ash -c "cp -r /test ~/test && cd ~/test && chmod +x init.sh && ./init.sh && echo using: && cat package.json && npm install && node test.js"
    - name: Build and push multiarch Images
      if: github.ref == 'refs/heads/master'
      run: docker buildx build  --push --build-arg ALPINE_TAG=${{matrix.image}} --build-arg NODEGIT_VERSION=${{matrix.nodegit}} --platform "linux/amd64,linux/arm64" $(echo '${{needs.generator.outputs.buildx}}' | jq -r '."${{matrix.image}}"."${{matrix.nodegit}}"') .

    - name: Prepare status artifact [${{matrix.image}}@${{matrix.nodegit}}.json]
      if: ${{ always() }}
      run: |
        mkdir status &&
        echo '{}' | jq --arg run "${GITHUB_RUN_ID}" --arg image "${{matrix.image}}" --arg nodegit "${{matrix.nodegit}}" '. + {run: $run, image: $image, nodegit: $nodegit}' > status/${{matrix.image}}@${{matrix.nodegit}}.json
    - name: Finalize status artifact @success
      if: ${{ success() }}
      run: |
        cat status/${{matrix.image}}@${{matrix.nodegit}}.json | jq --argjson success true '. + {success: $success}' | sponge status/${{matrix.image}}@${{matrix.nodegit}}.json
    - name: Finalize status artifact @failure
      if: ${{ failure() }}
      run: |
        cat status/${{matrix.image}}@${{matrix.nodegit}}.json | jq --argjson success false '. + {success: $success}' | sponge status/${{matrix.image}}@${{matrix.nodegit}}.json
    - name: Upload status artifact [${{matrix.image}}@${{matrix.nodegit}}.json]
      if: ${{ !cancelled() }}
      uses: actions/upload-artifact@v3
      with:
        name: status
        path: status/

  report:
    needs:
      - generator
      - image-builder
    if: ${{ !cancelled() }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        check-latest: true
    - name: Fetch Dependencies
      run: sudo apt install -qq -y jq && npm install
    - name: Fetch matrix jobs status artifacts
      uses: actions/download-artifact@v3
      with:
        path: jobs
    - name: Initialize report [jobs/tags.json]
      run: echo '${{needs.generator.outputs.tags}}' | jq '.' > jobs/tags.json
    - name: Generate Docker Hub Readme [HUB.md]
      run: node report >> HUB.md
    - name: Upload HUB.md
      uses: actions/upload-artifact@v3
      with:
        name: HUB.md
        path: HUB.md
    - name: push README to Dockerhub
      if: github.ref == 'refs/heads/master'
      uses: christian-korneck/update-container-description-action@v1
      env:
        DOCKER_USER: ${{ secrets.DOCKER_HUB_TOKEN }}
        DOCKER_PASS: ${{ secrets.DOCKER_HUB_SECRET_RM }}
      with:
        destination_container_repo: bitmeal/nodegit
        provider: dockerhub
        short_description: âœ¨ a node:alpine based image, shipping precompiled nodegit versions ðŸš¢
        readme_file: HUB.md